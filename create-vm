#!/usr/bin/python3
import os
import sys
import argparse
import subprocess
import random
import yaml


class Network:
    def __init__(self, bridge, interface, mac=None, ip=None, gateway=None, via=None):
        self.bridge = bridge
        self.mac = mac or self.generate_random_mac()
        self.interface = interface
        self.ip = ip
        self.gateway_ip = gateway or self.generate_gateway()
        self.gateway = gateway
        self.via = via
        self.config = {
            self.interface: {
                "match": {
                    "macaddress": self.mac,
                },
                "set-name": self.interface,
                "dhcp4": True,
                "nameservers": {"addresses": ["1.1.1.1", "8.8.8.8"]},
            }
        }

        if self.ip:
            self.config[self.interface]["addresses"] = [f"{self.ip}/24"] if self.ip else []
            self.config[self.interface]["routes"] = [{"to": self.via if self.via else f"{self.get_cidr()}/24","via": f"{self.gateway_ip}"}]
            self.config[self.interface]["dhcp4"] = False

    def generate_gateway(self):
        if self.ip:
            ip_parts = self.ip.split(".")
            ip_parts[-1] = "1"  # Assuming last octet is for gateway
            return ".".join(ip_parts)
        return None

    def get_cidr(self):
        if self.ip:
            ip_parts = self.ip.split(".")
            ip_parts[-1] = "0"  # Assuming last octet is for gateway
            return ".".join(ip_parts)
        return None

    def generate_random_mac(self):
        mac = [
            0x52,
            0x54,
            0x00,
            random.randint(0x00, 0xFF),
            random.randint(0x00, 0xFF),
            random.randint(0x00, 0xFF),
        ]
        return ":".join(map(lambda x: "%02x" % x, mac))


class NetplanConfig:
    def __init__(self):
        self.bridge = "virbr0"
        self.eth_pre = "eth"
        self.eth_num = 0
        self.networks = []
        self.config = {
            "version": 2,
            "ethernets": {},
        }

    def arg_parser(self, args):
        for network_args in args:
            network_arg = network_args.split(",")
            net_config = {}
            for item in network_arg:
                key, value = item.split("=")
                net_config[key.strip()] = value.strip()
            if "bridge" not in net_config:
                print("ERROR: Network configuration must contain bridge")
                sys.exit(1)
            if "eth" not in net_config:
                net_config["eth"] = self.get_interface()
                self.eth_num += 1
            network = Network(
                bridge=net_config.get("bridge"),
                interface=net_config.get("eth"),
                mac=net_config.get("mac"),
                ip=net_config.get("ip"),
                gateway=net_config.get("gw"),
                via=net_config.get("via"),
            )
            self.networks.append(network)

    def get_interface(self):
        return f"{self.eth_pre}{self.eth_num}"

    def to_yaml(self):
        for network in self.networks:
            self.config["ethernets"].update(network.config)
        return yaml.dump(self.config)


def usage():
    return """Quickly create guest VMs using cloud image files and cloud-init.

OPTIONS:
   -h      Show this message
   -n      Host name (required)
   -i      Full path and name of the base .img file to use (required)
   -k      Full path and name of the ansible user's public key file (required)
   -r      RAM in MB (defaults to 2048)
   -c      Number of VCPUs (defaults to 2)
   -s      Amount of storage to allocate in GB (defaults to 80)
   -b      Network configuration: bridge,mac,interface,ip,gw (can be specified multiple times)
   -u      Username for the VM (defaults to ansible)
   -v      Verbose
"""


def run_command(command, verbose=False):
    if verbose:
        print(f"Running command: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error running command: {result.stderr}")
        sys.exit(1)
    return result.stdout


def create_directories(vm_image_dir, verbose=False):
    dirs = ["images", "xml", "init", "base"]
    for dir in dirs:
        path = os.path.join(vm_image_dir, dir)
        if verbose:
            print(f"Creating directory: {path}")
        os.makedirs(path, exist_ok=True)


def create_qcow_image(vm_image_dir, base_img, vm_name, storage_size, verbose=False):
    dest_img = os.path.join(vm_image_dir, "images", f"{vm_name}.img")
    cmd = f"qemu-img create -b {base_img} -f qcow2 -F qcow2 {dest_img} {storage_size}G"
    print(f"Creating qcow2 image file {dest_img} using {base_img} as base")
    run_command(cmd, verbose)


def create_cloud_init_files(
    vm_image_dir, vm_name, pub_key_file, network_configs, username, verbose=False
):
    meta_data_path = os.path.join(vm_image_dir, "init", "meta-data")
    user_data_path = os.path.join(vm_image_dir, "init", "user-data")
    network_config_path = os.path.join(vm_image_dir, "init", "network-config")

    print(f"Creating meta-data file {meta_data_path}")
    with open(meta_data_path, "w") as meta_data:
        meta_data.write(f"instance-id: {vm_name}\nlocal-hostname: {vm_name}\n")

    print(f"Creating user-data file {user_data_path}")
    with open(user_data_path, "w") as user_data:
        user_data.write("#cloud-config\n\n")
        user_data.write("users:\n")
        user_data.write(f"  - name: {username}\n")
        user_data.write('    sudo: ["ALL=(ALL) NOPASSWD:ALL"]\n')
        user_data.write("    groups: sudo\n")
        user_data.write("    shell: /bin/bash\n")
        user_data.write(f"    homedir: /home/{username}\n")
        user_data.write("    ssh_authorized_keys:\n")

        with open(pub_key_file, "r") as keys:
            for key in keys:
                key = key.strip()
                if not key.startswith("#"):
                    user_data.write(f"      - {key}\n")

    print(
        f"Creating network-config files for {len(network_configs)} network interfaces"
    )
    with open(f"{network_config_path}", "w") as network_config_file:
        network_config_file.write(network_configs)


def create_cidata_iso(vm_image_dir, vm_name, verbose=False):
    user_data = os.path.join(vm_image_dir, "init", "user-data")
    meta_data = os.path.join(vm_image_dir, "init", "meta-data")
    network_config = os.path.join(vm_image_dir, "init", "network-config")
    iso_path = os.path.join(vm_image_dir, "images", f"{vm_name}-cidata.iso")

    cmd = f"genisoimage -output {iso_path} -volid cidata -rational-rock -joliet {user_data} {meta_data} {network_config}*"
    print(f"Generating the cidata ISO file {iso_path}")
    run_command(cmd, verbose)


def install_vm(vm_image_dir, vm_name, osinfo, ram, vcpus, networks, verbose=False):
    network_cmds = " ".join(
        [f"--network bridge={network.bridge},model=virtio,mac={network.mac}" for network in networks]
    )
    osinfo_cmds = f"--osinfo {osinfo}" if osinfo else f"--osinfo detect=on,require=off"
    virt_install_command = (
        f"virt-install "
        f"{network_cmds} "
        f"--name={vm_name} "
        f"{osinfo_cmds} "
        f"--import "
        f"--disk path={vm_image_dir}/images/{vm_name}.img,format=qcow2 "
        f"--disk path={vm_image_dir}/images/{vm_name}-cidata.iso,device=cdrom "
        f"--ram={ram} "
        f"--vcpus={vcpus} "
        f"--autostart "
        f"--hvm "
        f"--arch x86_64 "
        f"--accelerate "
        f"--check-cpu "
        f"--force "
        f"--watchdog=default "
        f"--graphics vnc,listen=0.0.0.0 "
        f"--noautoconsole "
        f"--debug"
    )

    run_command(virt_install_command, verbose)


def backup_vm_xml(vm_name, vm_image_dir, verbose=False):
    xml_path = os.path.join(vm_image_dir, "xml", f"{vm_name}.xml")
    cmd = f"virsh dumpxml {vm_name} > {xml_path}"
    run_command(cmd, verbose)


def list_running_vms(verbose=False):
    print(run_command("virsh list", verbose))


def main():
    parser = argparse.ArgumentParser(
        description="Quickly create guest VMs using cloud image files and cloud-init.",
        formatter_class=argparse.RawTextHelpFormatter,
        usage=usage(),
    )
    parser.add_argument("-n", required=True, help="Host name")
    parser.add_argument("-o", required=False, help="osinfo")
    parser.add_argument(
        "-i", required=True, help="Full path and name of the base .img file to use"
    )
    parser.add_argument(
        "-k",
        required=True,
        help="Full path and name of the ansible user's public key file",
    )
    parser.add_argument("-r", type=int, default=2048, help="RAM in MB")
    parser.add_argument("-c", type=int, default=2, help="Number of VCPUs")
    parser.add_argument(
        "-s", type=int, default=80, help="Amount of storage to allocate in GB"
    )
    parser.add_argument(
        "-b",
        required=False,
        action="append",
        help="Network configuration: bridge,mac,interface,ip,gateway",
    )
    parser.add_argument("-u", default="ansible", help="Username for the VM")
    parser.add_argument("-v", action="store_true", help="Verbose")

    args = parser.parse_args()

    vm_image_dir = os.getenv("VM_IMAGE_DIR", os.path.expanduser("~/vms/virsh"))

    if not os.path.isfile(args.i):
        print(f"ERROR: {args.i} file not found")
        sys.exit(1)

    if not os.path.isfile(args.k):
        print(f"ERROR: ansible public key file {args.k} not found")
        sys.exit(1)

    if args.v:
        print(f"Building {args.n} in {vm_image_dir}")
    network_config = NetplanConfig()
    network_config.arg_parser(args.b or ["bridge=virbr0"])
    abc = network_config.to_yaml()

    create_directories(vm_image_dir, args.v)
    create_qcow_image(vm_image_dir, args.i, args.n, args.s, args.v)
    create_cloud_init_files(
        vm_image_dir, args.n, args.k, network_config.to_yaml(), args.u, args.v
    )
    create_cidata_iso(vm_image_dir, args.n, args.v)
    install_vm(vm_image_dir, args.n, args.o, args.r, args.c, network_config.networks, args.v)
    backup_vm_xml(args.n, vm_image_dir, args.v)
    list_running_vms(args.v)


if __name__ == "__main__":
    main()
