#!/usr/bin/python 

#   create-vm - Quickly create guest VMs using cloud image files and cloud-init.

#   Copyright 2018-2023 Earl C. Ruby III
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and

# Set VM_IMAGE_DIR environment variable to override default storage location for VMs

import os
import sys
import argparse
import subprocess

def usage():
    return """Quickly create guest VMs using cloud image files and cloud-init.

OPTIONS:
   -h      Show this message
   -n      Host name (required)
   -i      Full path and name of the base .img file to use (required)
   -k      Full path and name of the ansible user's public key file (required)
   -r      RAM in MB (defaults to 2048)
   -c      Number of VCPUs (defaults to 2)
   -s      Amount of storage to allocate in GB (defaults to 80)
   -b      Bridge interface to use (defaults to virbr0)
   -m      MAC address to use (default is to use a randomly-generated MAC)
   -v      Verbose
"""

def run_command(command, verbose=False):
    if verbose:
        print(f"Running command: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error running command: {result.stderr}")
        sys.exit(1)
    return result.stdout

def main():
    parser = argparse.ArgumentParser(description='Quickly create guest VMs using cloud image files and cloud-init.',
                                     formatter_class=argparse.RawTextHelpFormatter, usage=usage())
    parser.add_argument('-n', required=True, help='Host name')
    parser.add_argument('-i', required=True, help='Full path and name of the base .img file to use')
    parser.add_argument('-k', required=True, help='Full path and name of the ansible user\'s public key file')
    parser.add_argument('-r', type=int, default=2048, help='RAM in MB')
    parser.add_argument('-c', type=int, default=2, help='Number of VCPUs')
    parser.add_argument('-s', type=int, default=80, help='Amount of storage to allocate in GB')
    parser.add_argument('-b', default='virbr0', help='Bridge interface to use')
    parser.add_argument('-m', help='MAC address to use')
    parser.add_argument('-v', action='store_true', help='Verbose')

    args = parser.parse_args()

    vm_image_dir = os.getenv('VM_IMAGE_DIR', os.path.expanduser('~/vms/virsh'))

    if not os.path.isfile(args.i):
        print(f"ERROR: {args.i} file not found")
        sys.exit(1)

    if not os.path.isfile(args.k):
        print(f"ERROR: ansible public key file {args.k} not found")
        sys.exit(1)

    if args.v:
        print(f"Building {args.n} in {vm_image_dir}")

    os.makedirs(f"{vm_image_dir}/images", exist_ok=True)
    os.makedirs(f"{vm_image_dir}/xml", exist_ok=True)
    os.makedirs(f"{vm_image_dir}/init", exist_ok=True)
    os.makedirs(f"{vm_image_dir}/base", exist_ok=True)

    print(f"Creating a qcow2 image file {vm_image_dir}/images/{args.n}.img that uses the cloud image file {args.i} as its base")
    run_command(f"qemu-img create -b {args.i} -f qcow2 -F qcow2 {vm_image_dir}/images/{args.n}.img {args.s}G", args.v)

    print(f"Creating meta-data file {vm_image_dir}/init/meta-data")
    with open(f"{vm_image_dir}/init/meta-data", 'w') as meta_data:
        meta_data.write(f"instance-id: {args.n}\nlocal-hostname: {args.n}\n")

    print(f"Creating user-data file {vm_image_dir}/init/user-data")
    with open(f"{vm_image_dir}/init/user-data", 'w') as user_data:
        user_data.write("#cloud-config\n\n")
        user_data.write("users:\n")
        user_data.write("  - name: ansible\n")
        user_data.write("    sudo: [\"ALL=(ALL) NOPASSWD:ALL\"]\n")
        user_data.write("    groups: sudo\n")
        user_data.write("    shell: /bin/bash\n")
        user_data.write("    homedir: /var/ansible\n")
        user_data.write("    ssh_authorized_keys:\n")

        with open(args.k, 'r') as keys:
            for key in keys:
                key = key.strip()
                if not key.startswith('#'):
                    user_data.write(f"      - {key}\n")

    print(f"Generating the cidata ISO file {vm_image_dir}/images/{args.n}-cidata.iso")
    run_command(f"genisoimage -output {vm_image_dir}/images/{args.n}-cidata.img -volid cidata -rational-rock -joliet {vm_image_dir}/init/user-data {vm_image_dir}/init/meta-data", args.v)

    mac_cmd = f"--mac={args.m}" if args.m else ""

    virt_install_command = (
        f"virt-install "
        f"--name={args.n} "
        f"--network bridge={args.b},model=virtio {mac_cmd} "
        f"--import "
        f"--disk path={vm_image_dir}/images/{args.n}.img,format=qcow2 "
        f"--disk path={vm_image_dir}/images/{args.n}-cidata.img,device=cdrom "
        f"--ram={args.r} "
        f"--vcpus={args.c} "
        f"--autostart "
        f"--hvm "
        f"--arch x86_64 "
        f"--accelerate "
        f"--check-cpu "
        f"--force "
        f"--watchdog=default "
        f"--graphics vnc,listen=0.0.0.0 "
        f"--noautoconsole "
        f"--debug"
    )

    run_command(virt_install_command, args.v)

    # Make a backup of the VM's XML definition file
    run_command(f"virsh dumpxml {args.n} > {vm_image_dir}/xml/{args.n}.xml", args.v)

    # Show running VMs
    print(run_command("virsh list", args.v))

if __name__ == "__main__":
    main()
