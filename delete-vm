#!/usr/bin/python 
#   delete-vm - Delete a virtual machine created with create-vm

#   Copyright 2018-2023 Earl C. Ruby III
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import os
import sys
import subprocess

def run_command(command):
    """Run a shell command and handle errors."""
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error running command: {result.stderr}")
        sys.exit(1)
    return result.stdout

def usage():
    print("usage: delete-vm vmname")

def main():
    if len(sys.argv) != 2:
        usage()
        sys.exit(1)

    vm = sys.argv[1]

    # Set VM_IMAGE_DIR environment variable to override default storage location for VMs
    vm_image_dir = os.getenv('VM_IMAGE_DIR', os.path.expanduser('~/vms/virsh'))

    vm_image = f"{vm_image_dir}/images/{vm}.img"
    ci_image = f"{vm_image_dir}/images/{vm}-cidata.iso"

    if os.path.exists(vm_image):
        # VM exists
        print(f"Destroying VM: {vm}")
        run_command(f"virsh destroy {vm}")
        print(f"Undefining VM: {vm}")
        run_command(f"virsh undefine {vm}")
        print(f"Removing VM images: {vm_image}, {ci_image}")
        os.remove(vm_image)
        os.remove(ci_image)
    else:
        print(f"Cannot find a VM image file named '{vm_image}'. Attempting undefine...")
        run_command(f"virsh undefine {vm}")

if __name__ == "__main__":
    main()
